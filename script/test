#!/bin/bash
#
# Runs all tests.

set -euo pipefail

# tput can be grumpy if TERM isn't set right... this wraps it if
# it exists or provides an no-op replacement.
function tput {
  command tput "$@" 2>/dev/null || true
}

function header {
  tput sgr0
  tput bold
  echo "$*"
  tput sgr0
}

declare -i global_color=99

function inc_color {
  global_color=$((global_color + 1))
  if ((global_color > 7)); then
    global_color=1
  fi
  printf "%d" "${global_color}"
}

function colorpipe {
  local c=$1 line

  while read -r line; do
    tput setaf "${c}"
    printf "\t%s" "${line}"
    tput sgr0
    echo
  done
}

failures=0

function runc {
  tput setaf 8
  tput bold
  printf "Running:"
  printf " %q" "$@"
  printf "\n"
  tput sgr0

  global_color=$((global_color + 1))
  if ((global_color > 7)); then
    global_color=2
  fi

  # shellcheck disable=SC2310
  if "$@" | colorpipe "${global_color}"; then
    true
  else
    failures=$((failures + 1))
  fi
}

header "Running tests..."
runc go test ./... -v

header "Running examples..."
for example in examples/*; do
  if [[ ! -d ${example} ]]; then
    continue
  fi

  # compgen -G is a badly documented trick to resolve wildcards into a
  # single file or an empty string.
  template=$(compgen -G "${example}"/*.template || :)
  json=$(compgen -G "${example}/*.json" || :)
  yaml=$(compgen -G "${example}/*.yaml" || :)
  TODAY_IS=$(date '+%x')

  if [[ -r ${json} ]] || [[ -r ${yaml} ]]; then
    if [[ -r ${json} ]]; then
      runc env "TODAY_IS=${TODAY_IS}" RUNNING_WITH=json-data go run ./... --data "${json}" "${template}"
    fi
    if [[ -r ${yaml} ]]; then
      runc env "TODAY_IS=${TODAY_IS}" RUNNING_WITH=yaml-data go run ./... --data "${yaml}" "${template}"
    fi
  else
    runc env "TODAY_IS=${TODAY_IS}" RUNNING_WITH=env go run ./... "${template}"
  fi
done

if ((failures > 0)); then
  tput setaf 1 # red
  tput bold
  printf "FAILURES: %d\n" "${failures}"
  tput sgr0
  exit 1
fi

# vim: set ft=sh :
